Pour créer un système d'authentification avec Google dans un projet Laravel, nous allons utiliser Firebase Authentication pour gérer l'authentification via OAuth. Voici comment procéder pour le **login** et le **logout** avec Google, en testant avec Google OAuth Playground.

### Étape 1 : Configuration de Firebase

1. **Créer un projet Firebase** :
   - Allez sur la [console Firebase](https://console.firebase.google.com/) et créez un nouveau projet.

2. **Activer Google Authentication** :
   - Dans le projet, allez à **Authentication** > **Sign-in method** et activez **Google**.

3. **Obtenir vos identifiants OAuth** :
   - Allez dans **Project settings** > **Service accounts**, puis générez une nouvelle clé privée (JSON) pour accéder à l'API Firebase.

### Étape 2 : Installer les dépendances dans Laravel

Assurez-vous d'avoir installé le SDK Firebase pour PHP. Vous pouvez l'ajouter à votre projet Laravel via Composer :

```bash
composer require kreait/firebase-php
```

### Étape 3 : Configuration de l'environnement

Ajoutez les informations de configuration de Firebase à votre fichier `.env` :

```dotenv
FIREBASE_PROJECT_ID=your_project_id
FIREBASE_CLIENT_EMAIL=your_client_email
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
```

### Étape 4 : Implémenter l'authentification dans le contrôleur

Créez un contrôleur d'authentification, par exemple `AuthController.php` :

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Kreait\Firebase\Auth;
use Kreait\Firebase\Factory;

class AuthController extends Controller
{
    protected $auth;

    public function __construct()
    {
        $factory = (new Factory)
            ->withServiceAccount([
                'project_id' => env('FIREBASE_PROJECT_ID'),
                'client_email' => env('FIREBASE_CLIENT_EMAIL'),
                'private_key' => env('FIREBASE_PRIVATE_KEY'),
            ]);
        $this->auth = $factory->createAuth();
    }

    public function login(Request $request)
    {
        $idToken = $request->input('idToken');

        try {
            // Vérifiez le token d'identification fourni par le client
            $verifiedIdToken = $this->auth->verifyIdToken($idToken);
            $uid = $verifiedIdToken->getClaim('sub');

            // Récupérer l'utilisateur ou créer un nouvel enregistrement
            // (ajoutez votre logique ici, par exemple, récupérer l'utilisateur depuis la base de données)

            return response()->json(['message' => 'Login successful', 'uid' => $uid]);
        } catch (\InvalidArgumentException $e) {
            return response()->json(['error' => 'Unauthorized'], 401);
        }
    }

    public function logout(Request $request)
    {
        // Dans Firebase, il n'y a pas de "logout" au sens traditionnel,
        // Vous pouvez invalider le token côté client.
        return response()->json(['message' => 'Logout successful']);
    }
}
```

### Étape 5 : Définir les Routes

Ajoutez les routes pour l'authentification dans votre fichier `routes/web.php` ou `routes/api.php` :

```php
use App\Http\Controllers\AuthController;

Route::post('/login', [AuthController::class, 'login']);
Route::post('/logout', [AuthController::class, 'logout']);
```

### Étape 6 : Tester avec Google OAuth Playground

1. **Ouvrez le Google OAuth Playground** : Allez sur [Google OAuth Playground](https://developers.google.com/oauthplayground).

2. **Configurer OAuth Playground** :
   - Cliquez sur le bouton d'engrenage (⚙️) et cochez "Use your own OAuth credentials".
   - Saisissez vos **Client ID** et **Client Secret** que vous avez obtenus dans la console Firebase.

3. **Obtenir un token d'accès** :
   - Dans l'OAuth Playground, sélectionnez `https://www.googleapis.com/auth/userinfo.email` pour demander l'accès à l'email de l'utilisateur.
   - Cliquez sur "Authorize APIs", puis sur "Exchange authorization code for tokens".

4. **Récupérer le token ID** :
   - Une fois que vous avez le token d'accès, utilisez-le pour obtenir les informations de l'utilisateur en appelant l'API :
     ```
     GET https://www.googleapis.com/oauth2/v3/userinfo
     ```

5. **Utiliser le token ID pour se connecter** :
   - Envoyez une requête POST à votre endpoint de login :
     ```bash
     curl -X POST http://your-laravel-app.test/login -d "idToken=YOUR_ID_TOKEN"
     ```

   - Remplacez `YOUR_ID_TOKEN` par le token que vous avez obtenu.

### Résumé

Ce cas pratique illustre comment configurer un système d'authentification avec Google dans un projet Laravel en utilisant Firebase Authentication. Vous pouvez ainsi gérer les connexions des utilisateurs via Google tout en maintenant la sécurité et l'intégration avec d'autres services Firebase.